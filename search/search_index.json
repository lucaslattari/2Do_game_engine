{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"2Do - Motor de Jogos 2D","text":""},{"location":"#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O 2Do \u00e9 um motor gr\u00e1fico (engine) para desenvolvimento de jogos de plataforma 2D, escrito em Python e criado por Lucas Lattari para fins educacionais. Projetado com foco em simplicidade e extensibilidade, o 2Do oferece uma abordagem modular e intuitiva para a cria\u00e7\u00e3o de jogos de plataforma.</p> <p>O framework foi desenvolvido com \u00eanfase em boas pr\u00e1ticas de programa\u00e7\u00e3o e arquitetura limpa, tornando-o ideal tanto para iniciantes que desejam aprender sobre desenvolvimento de jogos quanto para desenvolvedores que buscam uma base s\u00f3lida para seus projetos. Com suporte nativo a recursos essenciais como anima\u00e7\u00f5es baseadas em sprites, sistema de f\u00edsica para plataformas, e integra\u00e7\u00e3o com o formato TMX do Tiled Map Editor, o 2Do simplifica o processo de cria\u00e7\u00e3o de jogos 2D mantendo a flexibilidade para personaliza\u00e7\u00e3o.</p>"},{"location":"#arquitetura","title":"Arquitetura","text":"<p>O 2Do segue uma arquitetura modular com componentes bem definidos:</p> <ul> <li>Asset Manager: Centraliza o carregamento e gerenciamento de recursos do jogo.</li> <li>Entity System: Fornece a base para todos os objetos do jogo.</li> <li>Input Handler: Gerencia a entrada do usu\u00e1rio de forma configur\u00e1vel.</li> <li>Physics System: Implementa colis\u00f5es e movimenta\u00e7\u00e3o para jogos de plataforma.</li> <li>Background Manager: Controla elementos de plano de fundo e parallax.</li> <li>Configuration System: Permite personaliza\u00e7\u00e3o via arquivos .ini.</li> </ul>"},{"location":"#funcionalidades-principais","title":"Funcionalidades Principais","text":"<ul> <li>Sistema de F\u00edsica para Jogos de Plataforma: Implementa gravidade, colis\u00f5es e movimenta\u00e7\u00e3o dos personagens.</li> <li>Gerenciamento de Assets Baseado em Tiles: Organiza e carrega recursos gr\u00e1ficos usando mapas no formato TMX.</li> <li>Sistema de Anima\u00e7\u00e3o por Sprites: Suporta anima\u00e7\u00f5es fluidas para personagens e objetos.</li> <li>Colis\u00f5es Precisas: Detecta e gerencia colis\u00f5es entre diferentes entidades do jogo.</li> <li>Suporte a Plataformas Atravess\u00e1veis: Permite que os personagens passem atrav\u00e9s de certas plataformas.</li> <li>Parallax Scrolling para Planos de Fundo: Cria uma sensa\u00e7\u00e3o de profundidade movendo camadas de fundo a diferentes velocidades.</li> <li>Sistema de Configura\u00e7\u00e3o Flex\u00edvel: Permite personalizar configura\u00e7\u00f5es de jogo atrav\u00e9s de arquivos <code>.ini</code>.</li> <li>Controles Personaliz\u00e1veis: Mapeia entradas de teclado conforme a prefer\u00eancia do usu\u00e1rio.</li> <li>Suporte a Tela Cheia: Alterna entre modos de tela cheia e janela.</li> <li>Sistema de Logging Integrado: Facilita o rastreamento e depura\u00e7\u00e3o durante o desenvolvimento.</li> </ul>"},{"location":"#tecnologias-utilizadas","title":"Tecnologias Utilizadas","text":"<p>O 2Do \u00e9 constru\u00eddo utilizando as seguintes tecnologias:</p> <ul> <li>Python: Linguagem de programa\u00e7\u00e3o base do projeto, conhecida por sua simplicidade e legibilidade.</li> <li>Pygame: Framework para desenvolvimento de jogos 2D, fornecendo ferramentas para gr\u00e1ficos, som e entrada de usu\u00e1rio.</li> <li>PyTMX: Biblioteca para carregamento e manipula\u00e7\u00e3o de mapas no formato TMX, criado pelo Tiled Map Editor.</li> <li>ConfigParser: M\u00f3dulo para leitura e gerenciamento de arquivos de configura\u00e7\u00e3o <code>.ini</code>.</li> </ul>"},{"location":"#requisitos-do-sistema","title":"Requisitos do Sistema","text":"<p>Para executar o 2Do, voc\u00ea precisar\u00e1:</p> <ol> <li>Python 3.x instalado</li> <li>Depend\u00eancias listadas em <code>requirements.txt</code>:</li> <li>pygame==2.3.0</li> <li>PyTMX==3.31</li> <li>autopep8==2.0.2</li> <li>pycodestyle==2.10.0</li> <li>tomli==2.0.1</li> </ol>"},{"location":"#comecando","title":"Come\u00e7ando","text":""},{"location":"#instalacao","title":"Instala\u00e7\u00e3o","text":"<ol> <li>Clone o reposit\u00f3rio:</li> </ol> <pre><code>git clone [URL_DO_REPOSITORIO]\n</code></pre> <ol> <li>Instale as depend\u00eancias:</li> </ol> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"#executando-o-projeto","title":"Executando o Projeto","text":"<ol> <li> <p>Navegue at\u00e9 o diret\u00f3rio do projeto</p> </li> <li> <p>Execute o arquivo principal: python main.py</p> </li> </ol>"},{"location":"#demonstracao","title":"Demonstra\u00e7\u00e3o","text":"<p>A demonstra\u00e7\u00e3o mostra o motor em a\u00e7\u00e3o, apresentando:</p> <ul> <li>Movimenta\u00e7\u00e3o fluida do personagem</li> <li>Sistema de colis\u00f5es</li> <li>Plataformas atravess\u00e1veis</li> <li>Anima\u00e7\u00f5es suaves</li> <li>Parallax scrolling do plano de fundo</li> </ul>"},{"location":"#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Para come\u00e7ar a desenvolver com o 2Do, recomenda-se seguir esta documenta\u00e7\u00e3o na ordem:</p> <ol> <li>Configura\u00e7\u00e3o e Setup</li> <li>Estrutura Geral do Projeto</li> <li>Sistema de Gerenciamento de Recursos</li> <li>Entidades e Objetos do Jogo</li> </ol>"},{"location":"#contribuicoes","title":"Contribui\u00e7\u00f5es","text":"<p>Contribui\u00e7\u00f5es s\u00e3o bem-vindas! Por favor, sinta-se \u00e0 vontade para:</p> <ul> <li>Abrir uma issue para reportar bugs</li> <li>Propor novas funcionalidades</li> <li>Enviar pull requests</li> <li>Melhorar a documenta\u00e7\u00e3o</li> </ul>"},{"location":"#contato","title":"Contato","text":"<p>Lucas Lattari \ud83d\udce7 Email: lucas.lattari@ifsudestemg.edu.br \ud83d\udc31 GitHub: @lucaslattari</p>"},{"location":"#agradecimentos","title":"Agradecimentos","text":"<p>Agradecimentos especiais a todos que contribu\u00edram com o projeto, seja atrav\u00e9s de c\u00f3digo, sugest\u00f5es ou reportando problemas. Um agradecimento especial ao time de desenvolvimento do Pygame e PyTMX por fornecerem ferramentas que tornaram este projeto poss\u00edvel.</p>"},{"location":"assets/","title":"Sistema de Gerenciamento de Recursos","text":"<ul> <li>Arquivo: asset_manager.py.</li> <li>Como os recursos s\u00e3o carregados.</li> <li>Explica\u00e7\u00e3o de load_tiles e load_sprites.</li> <li>Como os ativos s\u00e3o gerenciados e recuperados.</li> </ul>"},{"location":"configuracao/","title":"* Explica\u00e7\u00e3o do arquivo config.ini (se\u00e7\u00f5es e par\u00e2metros).","text":""},{"location":"configuracao/#como-configurar-resolucao-volume-e-plano-de-fundo","title":"* Como configurar resolu\u00e7\u00e3o, volume e plano de fundo.","text":""},{"location":"configuracao/#configuracao-e-setup-do-2do","title":"Configura\u00e7\u00e3o e Setup do 2Do","text":"<p>Este guia ir\u00e1 ajud\u00e1-lo a configurar o ambiente de desenvolvimento para o 2Do e entender as configura\u00e7\u00f5es b\u00e1sicas do framework.</p>"},{"location":"configuracao/#preparando-o-ambiente","title":"Preparando o Ambiente","text":""},{"location":"configuracao/#requisitos-de-sistema-detalhados","title":"Requisitos de Sistema Detalhados","text":"<p>Para garantir o funcionamento adequado do 2Do, seu sistema deve atender aos seguintes requisitos:</p> <ul> <li>Python 3.8 ou superior: Download Python</li> <li>Git: Download Git</li> </ul>"},{"location":"configuracao/#instalacao-passo-a-passo","title":"Instala\u00e7\u00e3o Passo a Passo","text":""},{"location":"configuracao/#1-clonar-o-repositorio","title":"1. Clonar o Reposit\u00f3rio","text":"<p>Abra o terminal e execute o seguinte comando para clonar o reposit\u00f3rio do 2Do:</p> <pre><code>git clone [URL_DO_REPOSITORIO]\n</code></pre>"},{"location":"controle/","title":"Sistema de Entrada e Controle","text":"<ul> <li>Arquivo: input_handler.py.</li> <li>Como o controle \u00e9 configurado.</li> <li>Eventos de teclado e a\u00e7\u00f5es suportadas.</li> </ul>"},{"location":"entidades/","title":"Entidades e Objetos do Jogo","text":"<ul> <li>Arquivos: entity.py, item.py, platformer.py.</li> <li>Explica\u00e7\u00e3o das classes: Entity, Tile, Item, Platform.</li> <li>Colis\u00f5es e atualiza\u00e7\u00f5es.</li> </ul>"},{"location":"estrutura_projeto/","title":"Estrutura Geral do Projeto","text":"<ul> <li>Vis\u00e3o geral dos principais arquivos.</li> <li>Rela\u00e7\u00f5es entre eles usando um diagrama.</li> </ul>"},{"location":"executando/","title":"Arquivo Principal e Execu\u00e7\u00e3o","text":"<ul> <li>Arquivo: main.py.</li> <li>Explica\u00e7\u00e3o do loop principal.</li> <li>Como o jogo \u00e9 executado.</li> <li>Etapas principais (update, render, input).</li> </ul>"},{"location":"logica_jogo/","title":"L\u00f3gica de Jogo e Jogador","text":"<ul> <li>Arquivos: game.py, player.py.</li> <li>Como o jogo \u00e9 inicializado.</li> <li>Como o jogador interage com o mundo.</li> <li>Explica\u00e7\u00e3o da f\u00edsica do jogador (update_position, update_state_and_velocity).</li> </ul>"},{"location":"plano_fundo/","title":"Plano de Fundo e Interface","text":"<ul> <li>Arquivo: background.py.</li> <li>Como o plano de fundo \u00e9 carregado e renderizado.</li> <li>Efeito de rolagem (update e render).</li> </ul>"},{"location":"referencias/","title":"Refer\u00eancias e Recursos Adicionais","text":"<ul> <li>Links para documenta\u00e7\u00e3o de Pygame e PyTMX.</li> <li>Reposit\u00f3rio no GitHub.</li> <li>Pr\u00f3ximos passos e melhorias sugeridas.</li> </ul>"},{"location":"utils/","title":"Utilit\u00e1rios e Configura\u00e7\u00e3o Adicional","text":"<ul> <li>Arquivo: utils.py.</li> <li>Fun\u00e7\u00f5es auxiliares (read_config_file, render_fps).</li> </ul>"}]}