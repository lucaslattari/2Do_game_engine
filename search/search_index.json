{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"2Do - Motor de Jogos 2D","text":""},{"location":"#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O 2Do \u00e9 um motor gr\u00e1fico (engine) para desenvolvimento de jogos de plataforma 2D, escrito em Python e criado por Lucas Lattari para fins educacionais. Projetado com foco em simplicidade e extensibilidade, o 2Do oferece uma abordagem modular e intuitiva para a cria\u00e7\u00e3o de jogos de plataforma.</p> <p>O framework est\u00e1 sendo desenvolvido com \u00eanfase em boas pr\u00e1ticas de programa\u00e7\u00e3o e arquitetura limpa, tornando-o ideal tanto para iniciantes que desejam aprender sobre desenvolvimento de jogos quanto para desenvolvedores experientes que buscam uma base s\u00f3lida para seus projetos. Com suporte nativo a recursos como anima\u00e7\u00f5es baseadas em sprites, sistema de f\u00edsica para plataformas e integra\u00e7\u00e3o com o formato TMX do Tiled Map Editor, o 2Do almeja simplificar o processo de cria\u00e7\u00e3o de jogos 2D, mantendo a flexibilidade para personaliza\u00e7\u00e3o.</p>"},{"location":"#arquitetura","title":"Arquitetura","text":"<p>O 2Do segue uma arquitetura modular com componentes bem definidos:</p> <ul> <li>Asset Manager: Centraliza o carregamento e gerenciamento de recursos do jogo, como sprites, tiles e mapas.</li> <li>Entity System: Fornece a base para todos os objetos do jogo, como personagens, itens e plataformas.</li> <li>Input Handler: Gerencia a entrada do usu\u00e1rio de forma configur\u00e1vel, permitindo mapear teclas para a\u00e7\u00f5es espec\u00edficas.</li> <li>Physics System: Implementa colis\u00f5es e movimenta\u00e7\u00e3o para jogos de plataforma, incluindo gravidade e detec\u00e7\u00e3o de colis\u00f5es.</li> <li>Background Manager: Controla elementos de plano de fundo, como rolagem em paralaxe e camadas de fundo.</li> <li>Configuration System: Permite personaliza\u00e7\u00e3o do jogo via arquivos <code>.ini</code>, como resolu\u00e7\u00e3o, volume de \u00e1udio e controles.</li> </ul>"},{"location":"#funcionalidades-principais","title":"Funcionalidades Principais","text":"<ul> <li>Sistema de F\u00edsica para Jogos de Plataforma:</li> <li>Implementa gravidade, colis\u00f5es e movimenta\u00e7\u00e3o dos personagens.</li> <li>Suporta plataformas atravess\u00e1veis, permitindo que o jogador passe por certas plataformas ao pular ou cair.</li> </ul> <ul> <li>Gerenciamento de Assets Baseado em Tiles:</li> <li>Organiza e carrega recursos gr\u00e1ficos usando mapas no formato TMX (Tiled Map Editor).</li> <li>Facilita a cria\u00e7\u00e3o de n\u00edveis com tilesets e camadas.</li> </ul> <ul> <li>Sistema de Anima\u00e7\u00e3o por Sprites:</li> <li>Suporta anima\u00e7\u00f5es fluidas para personagens e objetos, com controle de frames e dura\u00e7\u00f5es.</li> </ul> <ul> <li>Colis\u00f5es Precisas:</li> <li>Detecta e gerencia colis\u00f5es entre diferentes entidades do jogo, como personagens, plataformas e itens.</li> </ul> <ul> <li>Parallax Scrolling para Planos de Fundo:</li> <li>Cria uma sensa\u00e7\u00e3o de profundidade movendo camadas de fundo a diferentes velocidades.</li> </ul> <ul> <li>Sistema de Configura\u00e7\u00e3o Flex\u00edvel:</li> <li>Permite personalizar configura\u00e7\u00f5es de jogo atrav\u00e9s de arquivos <code>.ini</code>, como resolu\u00e7\u00e3o, volume de \u00e1udio e controles.</li> </ul> <ul> <li>Controles Personaliz\u00e1veis:</li> <li>Mapeia entradas de teclado conforme a prefer\u00eancia do usu\u00e1rio, com suporte a teclas configur\u00e1veis.</li> </ul> <ul> <li>Suporte a Tela Cheia:</li> <li>Alterna entre modos de tela cheia e janela com um simples comando.</li> </ul> <ul> <li>Sistema de Logging Integrado:</li> <li>Facilita o rastreamento e depura\u00e7\u00e3o durante o desenvolvimento, com logs detalhados.</li> </ul>"},{"location":"#tecnologias-utilizadas","title":"Tecnologias Utilizadas","text":"<p>O 2Do \u00e9 constru\u00eddo utilizando as seguintes tecnologias:</p> <ul> <li>Python: Linguagem de programa\u00e7\u00e3o base do projeto, conhecida por sua simplicidade e legibilidade.</li> <li>Pygame: Framework para desenvolvimento de jogos 2D, fornecendo ferramentas para gr\u00e1ficos, som e entrada de usu\u00e1rio.</li> <li>PyTMX: Biblioteca para carregamento e manipula\u00e7\u00e3o de mapas no formato TMX, criado pelo Tiled Map Editor.</li> <li>ConfigParser: M\u00f3dulo para leitura e gerenciamento de arquivos de configura\u00e7\u00e3o <code>.ini</code>.</li> </ul>"},{"location":"#requisitos-do-sistema","title":"Requisitos do Sistema","text":"<p>Para executar o 2Do, voc\u00ea precisar\u00e1:</p> <ol> <li>Python 3.x instalado.</li> <li>Depend\u00eancias listadas em <code>requirements.txt</code>:    <code>plaintext    pygame==2.3.0    PyTMX==3.31    autopep8==2.0.2    pycodestyle==2.10.0    tomli==2.0.1</code></li> </ol>"},{"location":"#comecando","title":"Come\u00e7ando","text":""},{"location":"#instalacao","title":"Instala\u00e7\u00e3o","text":"<ol> <li> <p>Clone o reposit\u00f3rio:    <code>bash    git clone [URL_DO_REPOSITORIO]</code></p> </li> <li> <p>Instale as depend\u00eancias:    <code>bash    pip install -r requirements.txt</code></p> </li> </ol>"},{"location":"#executando-o-projeto","title":"Executando o Projeto","text":"<ol> <li> <p>Navegue at\u00e9 o diret\u00f3rio do projeto:    <code>bash    cd 2Do</code></p> </li> <li> <p>Execute o arquivo principal:    <code>bash    python main.py</code></p> </li> </ol>"},{"location":"#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Para come\u00e7ar a desenvolver com o 2Do, recomenda-se seguir esta documenta\u00e7\u00e3o na ordem:</p> <ol> <li>Configura\u00e7\u00e3o e Setup: Como configurar o ambiente de desenvolvimento.</li> <li>Estrutura Geral do Projeto: Entenda a organiza\u00e7\u00e3o dos arquivos e diret\u00f3rios.</li> <li>Sistema de Gerenciamento de Recursos: Aprenda a carregar e gerenciar assets.</li> <li>Entidades e Objetos do Jogo: Como criar e manipular personagens, itens e plataformas.</li> </ol>"},{"location":"#contribuicoes","title":"Contribui\u00e7\u00f5es","text":"<p>Contribui\u00e7\u00f5es s\u00e3o bem-vindas! Por favor, sinta-se \u00e0 vontade para:</p> <ul> <li>Abrir uma issue para reportar bugs.</li> <li>Propor novas funcionalidades.</li> <li>Enviar pull requests.</li> <li>Melhorar a documenta\u00e7\u00e3o.</li> </ul>"},{"location":"#contato","title":"Contato","text":"<p>Lucas Lattari \ud83d\udce7 Email: lucas.lattari@ifsudestemg.edu.br \ud83d\udc31 GitHub: @lucaslattari</p>"},{"location":"#agradecimentos","title":"Agradecimentos","text":"<p>Agradecimentos especiais a todos que contribu\u00edram com o projeto, seja atrav\u00e9s de c\u00f3digo, sugest\u00f5es ou reportando problemas. Um agradecimento especial ao time de desenvolvimento do Pygame e PyTMX por fornecerem ferramentas que tornaram este projeto poss\u00edvel.</p>"},{"location":"assets/","title":"Sistema de Gerenciamento de Recursos","text":"<ul> <li>Arquivo: asset_manager.py.</li> <li>Como os recursos s\u00e3o carregados.</li> <li>Explica\u00e7\u00e3o de load_tiles e load_sprites.</li> <li>Como os ativos s\u00e3o gerenciados e recuperados.</li> </ul>"},{"location":"configuracao/","title":"Configura\u00e7\u00e3o e Setup","text":""},{"location":"configuracao/#configuracao-e-setup-do-2do","title":"Configura\u00e7\u00e3o e Setup do 2Do","text":"<p>Este guia ir\u00e1 ajud\u00e1-lo a configurar o ambiente de desenvolvimento para o 2Do e entender as configura\u00e7\u00f5es b\u00e1sicas do framework.</p>"},{"location":"configuracao/#preparando-o-ambiente","title":"Preparando o Ambiente","text":""},{"location":"configuracao/#requisitos-de-sistema-detalhados","title":"Requisitos de Sistema Detalhados","text":"<p>Para garantir o funcionamento adequado do 2Do, seu sistema deve atender aos seguintes requisitos:</p> <ul> <li>Python 3.8 ou superior: Download Python</li> <li>Git: Download Git</li> </ul>"},{"location":"configuracao/#instalacao-passo-a-passo","title":"Instala\u00e7\u00e3o Passo a Passo","text":""},{"location":"configuracao/#1-clonar-o-repositorio","title":"1. Clonar o Reposit\u00f3rio","text":"<p>Abra o terminal e execute o seguinte comando para clonar o reposit\u00f3rio do 2Do:</p> <pre><code>git clone [URL_DO_REPOSITORIO]\n</code></pre>"},{"location":"configuracao/#2-instalar-dependencias","title":"2. Instalar Depend\u00eancias","text":"<p>Navegue at\u00e9 o diret\u00f3rio do projeto e instale as depend\u00eancias necess\u00e1rias:</p> <pre><code>cd 2Do\npip install -r requirements.txt\n</code></pre>"},{"location":"configuracao/#explicacao-do-arquivo-configini","title":"Explica\u00e7\u00e3o do Arquivo <code>config.ini</code>","text":"<p>O arquivo <code>config.ini</code> \u00e9 o arquivo de configura\u00e7\u00e3o principal do 2Do. Ele permite personalizar aspectos do jogo, como resolu\u00e7\u00e3o, volume de \u00e1udio, plano de fundo e controles. O arquivo \u00e9 dividido em se\u00e7\u00f5es, cada uma contendo par\u00e2metros espec\u00edficos.</p>"},{"location":"configuracao/#estrutura-do-arquivo","title":"Estrutura do Arquivo","text":"<p>O arquivo <code>config.ini</code> segue o formato padr\u00e3o de arquivos INI, com se\u00e7\u00f5es e pares de chave-valor. Abaixo est\u00e1 um exemplo do conte\u00fado do arquivo:</p> <pre><code>[graphics]\nresolution = 1280x720\nfullscreen = no\n\n[audio]\nvolume = 80\n\n[background]\nimage = graphics/Background/Brown.png\nx_block_bounds = 12,62\ny_block_bounds = 10,37\nscroll_speed = 0.6\n</code></pre>"},{"location":"configuracao/#secoes-e-parametros","title":"Se\u00e7\u00f5es e Par\u00e2metros","text":""},{"location":"configuracao/#secao-graphics","title":"Se\u00e7\u00e3o <code>[graphics]</code>","text":"<ul> <li><code>resolution</code>: Define a resolu\u00e7\u00e3o da tela do jogo. O valor deve ser no formato <code>LARGURAxALTURA</code> (por exemplo, <code>1280x720</code>).</li> <li><code>fullscreen</code>: Define se o jogo deve ser executado em tela cheia. Valores poss\u00edveis:</li> <li><code>yes</code>: Ativa o modo tela cheia.</li> <li><code>no</code>: Executa o jogo em modo janela.</li> </ul>"},{"location":"configuracao/#secao-audio","title":"Se\u00e7\u00e3o <code>[audio]</code>","text":"<ul> <li><code>volume</code>: Define o volume do \u00e1udio do jogo. O valor deve ser um n\u00famero entre <code>0</code> (mudo) e <code>100</code> (volume m\u00e1ximo).</li> </ul>"},{"location":"configuracao/#secao-background","title":"Se\u00e7\u00e3o <code>[background]</code>","text":"<ul> <li><code>image</code>: Define o caminho da imagem de fundo. O caminho deve ser relativo ao diret\u00f3rio do projeto.</li> <li><code>x_block_bounds</code>: Define os limites horizontais do plano de fundo. O valor deve ser no formato <code>MIN,MAX</code> (por exemplo, <code>12,62</code>).</li> <li><code>y_block_bounds</code>: Define os limites verticais do plano de fundo. O valor deve ser no formato <code>MIN,MAX</code> (por exemplo, <code>10,37</code>).</li> <li><code>scroll_speed</code>: Define a velocidade de rolagem do plano de fundo. Valores maiores resultam em rolagem mais r\u00e1pida.</li> </ul>"},{"location":"configuracao/#como-configurar-resolucao-volume-e-plano-de-fundo","title":"Como Configurar Resolu\u00e7\u00e3o, Volume e Plano de Fundo","text":""},{"location":"configuracao/#1-configurando-a-resolucao","title":"1. Configurando a Resolu\u00e7\u00e3o","text":"<p>Para alterar a resolu\u00e7\u00e3o do jogo, edite o par\u00e2metro <code>resolution</code> na se\u00e7\u00e3o <code>[graphics]</code>. Por exemplo, para definir a resolu\u00e7\u00e3o para 1920x1080:</p> <pre><code>[graphics]\nresolution = 1920x1080\n</code></pre>"},{"location":"configuracao/#2-configurando-o-volume","title":"2. Configurando o Volume","text":"<p>Para ajustar o volume do jogo, edite o par\u00e2metro <code>volume</code> na se\u00e7\u00e3o <code>[audio]</code>. Por exemplo, para definir o volume para 50%:</p> <pre><code>[audio]\nvolume = 50\n</code></pre>"},{"location":"configuracao/#3-configurando-o-plano-de-fundo","title":"3. Configurando o Plano de Fundo","text":"<p>O plano de fundo no 2Do \u00e9 configurado atrav\u00e9s da se\u00e7\u00e3o <code>[background]</code> no arquivo <code>config.ini</code>. Aqui est\u00e3o os par\u00e2metros que voc\u00ea pode ajustar:</p>"},{"location":"configuracao/#image","title":"<code>image</code>","text":"<p>Define o caminho da imagem de fundo. O caminho deve ser relativo ao diret\u00f3rio do projeto. Por exemplo:</p> <pre><code>image = graphics/Background/NewBackground.png\n</code></pre>"},{"location":"configuracao/#x_block_bounds-e-y_block_bounds","title":"<code>x_block_bounds</code> e <code>y_block_bounds</code>","text":"<p>Esses par\u00e2metros definem os limites horizontais e verticais do plano de fundo. Eles controlam quantas vezes a imagem de fundo ser\u00e1 repetida (ou \"tileada\") ao longo dos eixos X (horizontal) e Y (vertical).</p> <ul> <li><code>x_block_bounds</code>: Define os limites horizontais. O valor deve ser no formato <code>MIN,MAX</code>. Por exemplo, <code>12,62</code> significa que a imagem de fundo ser\u00e1 repetida horizontalmente entre os blocos 12 e 62 do mapa.</li> <li><code>y_block_bounds</code>: Define os limites verticais. O valor deve ser no formato <code>MIN,MAX</code>. Por exemplo, <code>10,37</code> significa que a imagem de fundo ser\u00e1 repetida verticalmente entre os blocos 10 e 37 do mapa.</li> </ul>"},{"location":"configuracao/#o-que-sao-blocos","title":"O que s\u00e3o \"blocos\"?","text":"<p>No contexto do 2Do, um bloco \u00e9 uma unidade de medida usada para posicionar elementos no jogo. Cada bloco tem um tamanho fixo, que \u00e9 definido pelo tamanho dos tiles no mapa (por exemplo, 16x16 pixels). Os limites horizontais e verticais (<code>x_block_bounds</code> e <code>y_block_bounds</code>) determinam quantos blocos ser\u00e3o preenchidos com a imagem de fundo.</p>"},{"location":"configuracao/#exemplo-pratico","title":"Exemplo Pr\u00e1tico","text":"<p>Imagine que voc\u00ea tem uma imagem de fundo de 256x256 pixels e o tamanho de cada bloco no jogo \u00e9 16x16 pixels. Se voc\u00ea definir:</p> <pre><code>x_block_bounds = 12,62\ny_block_bounds = 10,37\n</code></pre> <p>Isso significa que: - No eixo X (horizontal), a imagem de fundo ser\u00e1 repetida 50 vezes (62 - 12 = 50 blocos). - No eixo Y (vertical), a imagem de fundo ser\u00e1 repetida 27 vezes (37 - 10 = 27 blocos).</p> <p>Esses valores garantem que o fundo cubra toda a \u00e1rea vis\u00edvel do jogo, criando um efeito cont\u00ednuo e sem bordas vis\u00edveis.</p>"},{"location":"configuracao/#scroll_speed","title":"<code>scroll_speed</code>","text":"<p>Define a velocidade de rolagem do plano de fundo. Valores maiores resultam em rolagem mais r\u00e1pida, enquanto valores menores criam um efeito mais suave. Por exemplo:</p> <pre><code>scroll_speed = 0.6\n</code></pre>"},{"location":"configuracao/#exemplo-completo-de-configuracao-de-plano-de-fundo","title":"Exemplo Completo de Configura\u00e7\u00e3o de Plano de Fundo","text":"<p>Aqui est\u00e1 um exemplo completo de como configurar o plano de fundo:</p> <pre><code>[background]\nimage = graphics/Background/CustomBackground.png\nx_block_bounds = 12,62\ny_block_bounds = 10,37\nscroll_speed = 0.5\n</code></pre> <p>Neste exemplo: - A imagem <code>CustomBackground.png</code> ser\u00e1 usada como plano de fundo. - O fundo ser\u00e1 repetido horizontalmente entre os blocos 12 e 62. - O fundo ser\u00e1 repetido verticalmente entre os blocos 10 e 37. - A velocidade de rolagem ser\u00e1 de <code>0.5</code>, criando um efeito de parallax suave.</p>"},{"location":"configuracao/#dicas-de-configuracao","title":"Dicas de Configura\u00e7\u00e3o","text":"<ul> <li>Teste diferentes valores para <code>x_block_bounds</code> e <code>y_block_bounds</code>: Ajuste esses valores para garantir que o fundo cubra toda a \u00e1rea do jogo sem cortes ou repeti\u00e7\u00f5es indesejadas.</li> <li>Use imagens de fundo compat\u00edveis: Certifique-se de que as imagens de fundo tenham dimens\u00f5es adequadas para evitar distor\u00e7\u00f5es ou bordas vis\u00edveis.</li> <li>Ajuste a velocidade de rolagem: Valores menores de <code>scroll_speed</code> criam um efeito de parallax mais suave, enquanto valores maiores aumentam a sensa\u00e7\u00e3o de movimento.</li> </ul>"},{"location":"controle/","title":"Sistema de Entrada e Controle","text":"<ul> <li>Arquivo: input_handler.py.</li> <li>Como o controle \u00e9 configurado.</li> <li>Eventos de teclado e a\u00e7\u00f5es suportadas.</li> </ul>"},{"location":"entidades/","title":"Entidades e Objetos do Jogo","text":"<ul> <li>Arquivos: entity.py, item.py, platformer.py.</li> <li>Explica\u00e7\u00e3o das classes: Entity, Tile, Item, Platform.</li> <li>Colis\u00f5es e atualiza\u00e7\u00f5es.</li> </ul>"},{"location":"estrutura_projeto/","title":"Estrutura do Projeto 2Do","text":"<p>Este documento descreve a estrutura de diret\u00f3rios e arquivos do projeto 2Do, explicando a fun\u00e7\u00e3o de cada componente e como eles se relacionam para criar o motor de jogos 2D.</p>"},{"location":"estrutura_projeto/#visao-geral-da-estrutura","title":"Vis\u00e3o Geral da Estrutura","text":"<p>O projeto 2Do \u00e9 organizado em uma estrutura modular, onde cada arquivo e diret\u00f3rio tem uma responsabilidade clara. Abaixo est\u00e1 a \u00e1rvore de diret\u00f3rios do projeto:</p> <pre><code>2Do/\n\u251c\u2500\u2500 asset_manager.py\n\u251c\u2500\u2500 background.py\n\u251c\u2500\u2500 config.ini\n\u251c\u2500\u2500 demo_jogo.gif\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 assets.md\n\u2502   \u251c\u2500\u2500 configuracao.md\n\u2502   \u251c\u2500\u2500 controle.md\n\u2502   \u251c\u2500\u2500 entidades.md\n\u2502   \u251c\u2500\u2500 estrutura_projeto.md\n\u2502   \u251c\u2500\u2500 executando.md\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 logica_jogo.md\n\u2502   \u251c\u2500\u2500 plano_fundo.md\n\u2502   \u251c\u2500\u2500 referencias.md\n\u2502   \u2514\u2500\u2500 utils.md\n\u251c\u2500\u2500 entity.py\n\u251c\u2500\u2500 game.py\n\u251c\u2500\u2500 input_handler.py\n\u251c\u2500\u2500 item.py\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 platformer.py\n\u251c\u2500\u2500 player.py\n\u251c\u2500\u2500 readme.md\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 site/\n\u2502   \u251c\u2500\u2500 404.html\n\u2502   \u251c\u2500\u2500 assets/\n\u2502   \u2502   \u251c\u2500\u2500 images/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 favicon.png\n\u2502   \u2502   \u251c\u2500\u2500 index.html\n\u2502   \u2502   \u251c\u2500\u2500 javascripts/\n\u2502   \u2502   \u2514\u2500\u2500 stylesheets/\n\u2502   \u251c\u2500\u2500 configuracao/\n\u2502   \u251c\u2500\u2500 controle/\n\u2502   \u251c\u2500\u2500 entidades/\n\u2502   \u251c\u2500\u2500 estrutura_projeto/\n\u2502   \u251c\u2500\u2500 executando/\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u251c\u2500\u2500 logica_jogo/\n\u2502   \u251c\u2500\u2500 plano_fundo/\n\u2502   \u251c\u2500\u2500 referencias/\n\u2502   \u251c\u2500\u2500 search/\n\u2502   \u251c\u2500\u2500 sitemap.xml\n\u2502   \u251c\u2500\u2500 sitemap.xml.gz\n\u2502   \u2514\u2500\u2500 utils/\n\u2514\u2500\u2500 utils.py\n</code></pre>"},{"location":"estrutura_projeto/#descricao-dos-arquivos-e-diretorios","title":"Descri\u00e7\u00e3o dos Arquivos e Diret\u00f3rios","text":""},{"location":"estrutura_projeto/#arquivos-principais","title":"Arquivos Principais","text":"<ul> <li><code>main.py</code>: Ponto de entrada do jogo. Respons\u00e1vel por inicializar o Pygame, carregar o jogo e executar o loop principal.</li> <li><code>game.py</code>: Cont\u00e9m a classe <code>Game</code>, que gerencia o estado do jogo, carrega n\u00edveis, e coordena a renderiza\u00e7\u00e3o e atualiza\u00e7\u00e3o de entidades.</li> <li><code>config.ini</code>: Arquivo de configura\u00e7\u00e3o do jogo, onde s\u00e3o definidos par\u00e2metros como resolu\u00e7\u00e3o, volume e plano de fundo.</li> </ul>"},{"location":"estrutura_projeto/#modulos-do-motor","title":"M\u00f3dulos do Motor","text":"<ul> <li><code>asset_manager.py</code>: Gerencia o carregamento e organiza\u00e7\u00e3o de assets (recursos) como sprites, tiles e mapas.</li> <li><code>background.py</code>: Controla o plano de fundo do jogo, incluindo rolagem parallax e carregamento de imagens.</li> <li><code>entity.py</code>: Define as classes base para entidades do jogo, como <code>Tile</code> e <code>Entity</code>, que s\u00e3o usadas para representar objetos no jogo.</li> <li><code>input_handler.py</code>: Gerencia a entrada do usu\u00e1rio (teclado) e mapeia teclas para a\u00e7\u00f5es no jogo.</li> <li><code>player.py</code>: Implementa a classe <code>Player</code>, que representa o personagem controlado pelo jogador, incluindo movimenta\u00e7\u00e3o, anima\u00e7\u00f5es e colis\u00f5es.</li> <li><code>platformer.py</code>: Define a classe <code>Platform</code>, que representa as plataformas do jogo.</li> <li><code>item.py</code>: Define a classe <code>Item</code>, que representa itens colet\u00e1veis no jogo.</li> <li><code>utils.py</code>: Cont\u00e9m fun\u00e7\u00f5es utilit\u00e1rias, como renderiza\u00e7\u00e3o de FPS e leitura de arquivos de configura\u00e7\u00e3o.</li> </ul>"},{"location":"estrutura_projeto/#documentacao","title":"Documenta\u00e7\u00e3o","text":"<ul> <li><code>docs/</code>: Diret\u00f3rio contendo a documenta\u00e7\u00e3o do projeto em formato Markdown.</li> <li><code>assets.md</code>: Explica como gerenciar assets (sprites, tiles, etc.).</li> <li><code>configuracao.md</code>: Detalha o arquivo <code>config.ini</code> e como configurar o jogo.</li> <li><code>controle.md</code>: Explica como configurar e personalizar os controles do jogo.</li> <li><code>entidades.md</code>: Descreve as entidades do jogo (player, itens, plataformas).</li> <li><code>estrutura_projeto.md</code>: Este arquivo, que descreve a estrutura do projeto.</li> <li><code>executando.md</code>: Guia para executar o jogo e configurar o ambiente.</li> <li><code>logica_jogo.md</code>: Explica a l\u00f3gica principal do jogo, como f\u00edsica e colis\u00f5es.</li> <li><code>plano_fundo.md</code>: Detalha como o plano de fundo \u00e9 configurado e renderizado.</li> <li><code>referencias.md</code>: Lista refer\u00eancias e recursos utilizados no projeto.</li> <li><code>utils.md</code>: Explica as fun\u00e7\u00f5es utilit\u00e1rias do projeto.</li> </ul>"},{"location":"estrutura_projeto/#outros-arquivos","title":"Outros Arquivos","text":"<ul> <li><code>requirements.txt</code>: Lista as depend\u00eancias do projeto, como Pygame e PyTMX.</li> <li><code>mkdocs.yml</code>: Arquivo de configura\u00e7\u00e3o para gerar a documenta\u00e7\u00e3o usando MkDocs.</li> <li><code>site/</code>: Diret\u00f3rio gerado pelo MkDocs contendo a documenta\u00e7\u00e3o em formato HTML.</li> </ul>"},{"location":"estrutura_projeto/#fluxo-de-execucao","title":"Fluxo de Execu\u00e7\u00e3o","text":"<ol> <li>Inicializa\u00e7\u00e3o: O jogo come\u00e7a no <code>main.py</code>, que inicializa o Pygame e carrega o arquivo de configura\u00e7\u00e3o (<code>config.ini</code>).</li> <li>Carregamento do N\u00edvel: O <code>game.py</code> carrega o n\u00edvel usando o <code>AssetManager</code> e inicializa as entidades (player, itens, plataformas).</li> <li>Loop Principal:</li> <li>O <code>InputHandler</code> processa a entrada do usu\u00e1rio.</li> <li>O <code>Game</code> atualiza o estado do jogo (f\u00edsica, colis\u00f5es, anima\u00e7\u00f5es).</li> <li>O <code>Background</code> atualiza e renderiza o plano de fundo.</li> <li>Todas as entidades s\u00e3o renderizadas na tela.</li> <li>Finaliza\u00e7\u00e3o: Quando o jogo \u00e9 encerrado, o Pygame \u00e9 finalizado e os recursos s\u00e3o liberados.</li> </ol>"},{"location":"estrutura_projeto/#relacionamento-entre-modulos","title":"Relacionamento entre M\u00f3dulos","text":"<ul> <li>O <code>main.py</code> depende do <code>game.py</code> para gerenciar o estado do jogo.</li> <li>O <code>game.py</code> depende do <code>asset_manager.py</code> para carregar recursos e do <code>input_handler.py</code> para processar entradas.</li> <li>As entidades (<code>player.py</code>, <code>item.py</code>, <code>platformer.py</code>) dependem da classe base <code>entity.py</code>.</li> <li>O <code>background.py</code> \u00e9 usado pelo <code>game.py</code> para renderizar o plano de fundo.</li> <li>Fun\u00e7\u00f5es utilit\u00e1rias no <code>utils.py</code> s\u00e3o usadas em v\u00e1rios m\u00f3dulos.</li> </ul>"},{"location":"estrutura_projeto/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Agora que voc\u00ea entende a estrutura do projeto, pode explorar outros t\u00f3picos da documenta\u00e7\u00e3o, como: - Gerenciamento de Assets - Controles do Jogo - Entidades do Jogo</p>"},{"location":"executando/","title":"Arquivo Principal e Execu\u00e7\u00e3o","text":"<ul> <li>Arquivo: main.py.</li> <li>Explica\u00e7\u00e3o do loop principal.</li> <li>Como o jogo \u00e9 executado.</li> <li>Etapas principais (update, render, input).</li> </ul>"},{"location":"logica_jogo/","title":"L\u00f3gica de Jogo e Jogador","text":"<ul> <li>Arquivos: game.py, player.py.</li> <li>Como o jogo \u00e9 inicializado.</li> <li>Como o jogador interage com o mundo.</li> <li>Explica\u00e7\u00e3o da f\u00edsica do jogador (update_position, update_state_and_velocity).</li> </ul>"},{"location":"plano_fundo/","title":"Plano de Fundo e Interface","text":"<ul> <li>Arquivo: background.py.</li> <li>Como o plano de fundo \u00e9 carregado e renderizado.</li> <li>Efeito de rolagem (update e render).</li> </ul>"},{"location":"referencias/","title":"Refer\u00eancias e Recursos Adicionais","text":"<ul> <li>Links para documenta\u00e7\u00e3o de Pygame e PyTMX.</li> <li>Reposit\u00f3rio no GitHub.</li> <li>Pr\u00f3ximos passos e melhorias sugeridas.</li> </ul>"},{"location":"utils/","title":"Utilit\u00e1rios e Configura\u00e7\u00e3o Adicional","text":"<ul> <li>Arquivo: utils.py.</li> <li>Fun\u00e7\u00f5es auxiliares (read_config_file, render_fps).</li> </ul>"}]}